openapi: 3.0.0
info:
    title: nhatrotot's backend
    version: 1.0.0
servers:
    - url: http://localhost:8080/api
tags:
    - name: root
      description: test openapi features
    - name: file
      description: apis for uploading and delete image and video data
    - name: auth
      description: apis for authentication feature
    - name: user
      description: apis for user feature
    - name: payment
      description: apis for payment feature
    - name: country
      description: apis for country details
    - name: houses
      description: apis for house details
    - name: statistics
      description: apis for statistics
paths:
    /first_request:
        get:
            operationId: helloWorld
            summary: test auth api
            tags:
                - root
            responses:
                200:
                    description: ok
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: "Hello world"
                404:
                    description: Bad request.
                    content:
                        text/plain:
                            schema:
                                type: string
    /file:
        post:
            operationId: postFileHandle
            summary: upload a file to server
            description: upload a file to server
            tags:
                - "file"
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            $ref: "#/components/schemas/FileUpload"
            responses:
                200:
                    description: file upload success
                    content:
                        text/plain:
                            schema:
                                type: string
                                description: url of video or image
                                example: "https://int3509.s3.ap-southeast-1.amazonaws.com/2022-12-14+09-39-15.mp4"
                400:
                    $ref: "#/components/responses/BadRequest"
        delete:
            operationId: bulkDeleteFilesHandle
            summary: bulk Delete Files
            description: bulk delete files
            tags:
                - "file"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                images:
                                    type: array
                                    items:
                                        type: string
                            required:
                                - images
            responses:
                200:
                    description: ok
                400:
                    $ref: "#/components/responses/BadRequest"
    /auth/signup:
        post:
            operationId: signUpHandle
            summary: sign up
            description: endpoint for user sign up
            tags:
                - "auth"
            requestBody:
                required: true
                description: details of new user
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UserCreationFields"
            responses:
                201:
                    description: the user was successfully created.
                400:
                    $ref: "#/components/responses/BadRequest"
    /auth/password:
        put:
            operationId: changePasswordHandle
            summary: change password
            description: endpoint for user change pass
            tags:
                - "auth"
            requestBody:
                required: true
                description: old and new pass
                content:
                    application/json:
                        schema:
                            properties:
                                oldPassword:
                                    type: string
                                    format: password
                                    pattern: '\S{8,30}'
                                newPassword:
                                    type: string
                                    format: password
                                    pattern: '\S{8,30}'
                            required:
                                - oldPassword
                                - newPassword
            responses:
                200:
                    description: OK, log out user after success
                400:
                    $ref: "#/components/responses/BadRequest"
                401:
                    description: wrong current password.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BadRequestResponse"

    /auth/reset:
        post:
            operationId: resetPasswordHandle
            summary: reset user password by email
            description: reset user password by email
            tags:
                - "auth"
            requestBody:
                required: true
                description: user's email
                content:
                    application/json:
                        schema:
                            properties:
                                email:
                                    title: user's email
                                    pattern: '^[^\s@]+@[^\s@]+\.[^\s@]+$'
                                    type: string
                            required:
                                - email
            responses:
                200:
                    description: mail has sent.
                400:
                    $ref: "#/components/responses/BadRequest"
    /auth/sub-admin:
        post:
            operationId: createSubAdminHandle
            summary: sign up
            description: endpoint for create sub admin
            tags:
                - "auth"
            requestBody:
                required: true
                description: details of new sub admin
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UserCreationFields"
            responses:
                201:
                    description: the sub admin was successfully created.
                400:
                    $ref: "#/components/responses/BadRequest"
    /auth/sub-admin/{userId}/password:
        put:
            operationId: resetSAPasswordHandle
            summary: reset sub-admin password
            tags:
                - "auth"
            parameters:
                - name: userId
                  in: path
                  description: id of the sub admin
                  required: true
                  schema:
                      type: string
                      format: uuid
            requestBody:
                required: true
                description: sub-admin's password
                content:
                    application/json:
                        schema:
                            properties:
                                password:
                                    title: user's password
                                    type: string
                            required:
                                - password
            responses:
                200:
                    description: reset successfully .
                400:
                    $ref: "#/components/responses/BadRequest"

    /auth/users/{userId}:
        delete:
            tags:
                - "auth"
            operationId: banUserHandle
            description: sub-admin or admin toggle activating user
            parameters:
                - name: userId
                  in: path
                  description: id of the user
                  required: true
                  schema:
                      type: string
                      format: uuid
            responses:
                200:
                    description: user delete successfully
                400:
                    $ref: "#/components/responses/BadRequest"
                403:
                    description: User need higher role to do this thing
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BadRequestResponse"
    /users:
        get:
            tags:
                - "user"
            operationId: getListUserInformation
            description: get list of users including user's public information
            parameters:
                - name: page
                  in: query
                  description: Page number
                  schema:
                      type: integer
                      minimum: 0
                      default: 0
                  required: false
                - name: size
                  in: query
                  schema:
                      type: integer
                      minimum: 1
                      default: 20
                  description: Page size
                  required: false
                - name: searchPhrase
                  in: query
                  schema:
                      type: string
                      example: yuh
                      default: ""
                  description: email or first name or last name or phone of user to find
                  required: false

            responses:
                200:
                    description: list of user info and paging details
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserPublicInformationPage"
                400:
                    $ref: "#/components/responses/BadRequest"
    /users/{userId}:
        get:
            tags:
                - "user"
            operationId: getUserInformation
            description: return information based on user's id
            parameters:
                - name: userId
                  in: path
                  description: id of the user
                  schema:
                      type: string
                      format: uuid
                  required: true
            responses:
                200:
                    description: user's public information
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserPublicInformation"
                400:
                    $ref: "#/components/responses/BadRequest"
                404:
                    description: User not found
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BadRequestResponse"
    /users/me/my-info:
        get:
            tags:
                - "user"
            operationId: getMyInformation
            description: return user's information
            responses:
                200:
                    description: user's information
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserInformation"
                400:
                    $ref: "#/components/responses/BadRequest"
                404:
                    description: User not found
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BadRequestResponse"
        put:
            tags:
                - "user"
            operationId: changeUserInformationHandler
            description: change user information
            requestBody:
                required: true
                description: user changeable fields
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UserFields"
            responses:
                200:
                    description: ok
                400:
                    $ref: "#/components/responses/BadRequest"
    /users/me/my-payments:
        get:
            tags:
                - "user"
            operationId: getMyPaymentsHandle
            description: get list of my payments
            parameters:
                - name: page
                  in: query
                  description: Page number
                  schema:
                      type: integer
                      minimum: 0
                      default: 0
                  required: false
                - name: size
                  in: query
                  schema:
                      type: integer
                      minimum: 1
                      default: 20
                  description: Page size
                  required: false
                - name: type
                  in: query
                  schema:
                      type: integer
                      example: 1
                      enum:
                          - 1
                          - 2
                      default: ""
                  description: type of payment to find
                  required: false
            responses:
                200:
                    description: list of user payments and paging details
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/MyPaymentsPage"
                400:
                    $ref: "#/components/responses/BadRequest"
    /users/me/my-payments/{paymentId}:
        get:
            operationId: getMyDetailsPayments
            description: get details payment
            parameters:
                - name: paymentId
                  in: path
                  schema:
                      type: string
                      format: uuid
                  required: true
            responses:
                200:
                    description: details payment (vnp or manual)
                    content:
                        application/json:
                            schema:
                                oneOf:
                                    - $ref: "#/components/schemas/VnpPaymentDetails"
                                    - $ref: "#/components/schemas/ManualPaymentDetail"
                400:
                    $ref: "#/components/responses/BadRequest"
    /users/admin/users:
        get:
            tags:
                - "user"
            operationId: adminGetListUserInformation
            description: get list of users including user's public information
            parameters:
                - name: page
                  in: query
                  description: Page number
                  schema:
                      type: integer
                      minimum: 0
                      default: 0
                  required: false
                - name: size
                  in: query
                  schema:
                      type: integer
                      minimum: 1
                      default: 20
                  description: Page size
                  required: false
                - name: email
                  in: query
                  schema:
                      type: string
                      example: yuh
                      default: ""
                  description: email of user to find
                  required: false
                - name: role
                  in: query
                  schema:
                      type: integer
                      minimum: 1
                      maximum: 3
                      format: int64
                  description: role id of user to find
                  required: false
            responses:
                200:
                    description: list of user info and paging details
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserInformationPage"
                400:
                    $ref: "#/components/responses/BadRequest"
    /users/admin/users/{userId}:
        get:
            tags:
                - "user"
            operationId: adminGetUserInformation
            description: return information based on user's id
            parameters:
                - name: userId
                  in: path
                  description: id of the user
                  schema:
                      type: string
                      format: uuid
                  required: true
            responses:
                200:
                    description: user's information
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserInformation"
                400:
                    $ref: "#/components/responses/BadRequest"
                404:
                    description: User not found
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BadRequestResponse"
    /users/admin/users/{userId}/title:
        put:
            tags:
                - "user"
            operationId: changeUserTitleHandle
            description: change user's title
            parameters:
                - name: userId
                  in: path
                  description: id of the user
                  schema:
                      type: string
                      format: uuid
                  required: true
            requestBody:
                required: true
                description: user's email
                content:
                    application/json:
                        schema:
                            properties:
                                title:
                                    title: user's title
                                    type: integer
                                    minimum: 2
                                    maximum: 3
                                    format: int64
                            required:
                                - title
            responses:
                200:
                    description: ok
                400:
                    $ref: "#/components/responses/BadRequest"
                404:
                    description: User not found
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BadRequestResponse"
    /users/action/rating:
        post:
            tags:
                - "user"
            operationId: addRatingHandle
            description: add user rating
            requestBody:
                required: true
                description: user's email
                content:
                    application/json:
                        schema:
                            properties:
                                rating:
                                    title: user's rating
                                    type: integer
                                    minimum: 1
                                    maximum: 10
                                userId:
                                    type: string
                                    format: uuid
                            required:
                                - title
                                - userId
            responses:
                200:
                    description: ok
                400:
                    $ref: "#/components/responses/BadRequest"
                404:
                    description: User not found
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/BadRequestResponse"
    /payment/vnpay:
        post:
            tags:
                - "payment"
            description: return vnpay payment url
            operationId: createVnPayPaymentUrl
            requestBody:
                required: true
                description: user payment's amount and user order's attachment
                content:
                    application/json:
                        schema:
                            properties:
                                amount:
                                    title: user's payment amount in vnd
                                    type: number
                                    minimum: 100_000
                                orderAttachment:
                                    type: string
                            required:
                                - amount
                                - orderAttachment
            responses:
                200:
                    description: OK
                    content:
                        text/plain:
                            schema:
                                type: string
                                description: url of vnpay
                                example: "https://int3509.s3.ap-southeast-1.amazonaws.com/2022-12-14+09-39-15.mp4"
                400:
                    $ref: "#/components/responses/BadRequest"
    /payment/manual:
        post:
            tags:
                - "payment"
            description: create manual payment request
            operationId: createManualPaymentRequest
            requestBody:
                required: true
                description: user payment's amount and user order's attachment
                content:
                    application/json:
                        schema:
                            properties:
                                amount:
                                    title: user's payment amount in vnd
                                    type: number
                                    minimum: 100_000
                                orderAttachment:
                                    type: string
                            required:
                                - amount
                                - orderAttachment
            responses:
                200:
                    description: OK, return payment id and wait for the admin or subadmin verify
                    content:
                        text/plain:
                            schema:
                                type: string
                                example: "02720c86-c11d-4c80-a3b1-9307d7b5esc2"
                400:
                    $ref: "#/components/responses/BadRequest"
    /payment/manual/verify:
        post:
            tags:
                - "payment"
            description: verify manual payment or cancel payment
            operationId: verifyManualPayment
            requestBody:
                required: true
                description: manual payment id
                content:
                    application/json:
                        schema:
                            properties:
                                paymentId:
                                    type: string
                                    format: uuid
                                state:
                                    type: string
                                    enum:
                                        - done
                                        - cancelled

                            required:
                                - paymentId
                                - state
            responses:
                200:
                    description: ok
                400:
                    $ref: "#/components/responses/BadRequest"
    /payment/vnpay-return:
        get:
            tags:
                - "payment"
            description: vnpay payment callback
            operationId: VnPayAfterPurchaseCallback
            parameters:
                - name: vnp_TmnCode
                  in: query
                  schema:
                      type: string
                  required: true
                - name: vnp_TxnRef
                  in: query
                  schema:
                      type: string
                  required: true
                - name: vnp_OrderInfo
                  in: query
                  schema:
                      type: string
                  required: true
                - name: vnp_Amount
                  in: query
                  schema:
                      type: number
                  required: true
                - name: vnp_ResponseCode
                  in: query
                  schema:
                      type: string
                  required: true
                - name: vnp_BankCode
                  in: query
                  schema:
                      type: string
                  required: true
                - name: vnp_BankTranNo
                  in: query
                  schema:
                      type: string
                  required: false
                - name: vnp_CardType
                  in: query
                  schema:
                      type: string
                  required: true
                - name: vnp_PayDate
                  in: query
                  schema:
                      type: string
                  required: true
                - name: vnp_TransactionNo
                  in: query
                  schema:
                      type: string
                  required: true
                - name: vnp_TransactionStatus
                  in: query
                  schema:
                      type: string
                  required: true
                - name: vnp_SecureHash
                  in: query
                  schema:
                      type: string
                  required: true

            responses:
                302:
                    description: redirect OK or Error
    /payment/admin/payments:
        get:
            tags:
                - "payment"
            operationId: getAkkPaymentsHandle
            description: get list of payments
            parameters:
                - name: page
                  in: query
                  description: Page number
                  schema:
                      type: integer
                      minimum: 0
                      default: 0
                  required: false
                - name: size
                  in: query
                  schema:
                      type: integer
                      minimum: 1
                      default: 20
                  description: Page size
                  required: false
                - name: type
                  in: query
                  schema:
                      type: integer
                      example: 1
                      enum:
                          - 1
                          - 2
                  description: type of payment to find
                  required: false
                - name: userEmail
                  in: query
                  schema:
                      type: string
                      default: ""
                  required: false
                - name: paymentState
                  in: query
                  schema:
                      type: string
                      enum:
                          - pending
                          - done
                          - cancelled
                          - ""
                      default: ""
                  required: false
                - name: sortBy
                  in: query
                  schema:
                      type: string
                      enum:
                          - createdAt
                      default: "createdAt"
                - name: sortOrder
                  in: query
                  schema:
                      type: string
                      enum:
                          - asc
                          - desc
                      default: "desc"
            responses:
                200:
                    description: list of user payments and paging details
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaymentsPage"
                400:
                    $ref: "#/components/responses/BadRequest"
    /payment/admin/payments/{paymentId}:
        get:
            tags:
                - "payment"
            operationId: getDetailsPayments
            description: get details payment
            parameters:
                - name: paymentId
                  in: path
                  schema:
                      type: string
                      format: uuid
                  required: true
            responses:
                200:
                    description: details payment (vnp or manual)
                    content:
                        application/json:
                            schema:
                                oneOf:
                                    - $ref: "#/components/schemas/VnpPaymentDetails"
                                    - $ref: "#/components/schemas/ManualPaymentDetail"
                400:
                    $ref: "#/components/responses/BadRequest"
    /country:
        get:
            tags:
                - "country"
            operationId: getAllProvince
            description: get all 63 provinces
            responses:
                200:
                    description: all 63 provinces
                    content:
                        application/json:
                            schema:
                                properties:
                                    provinces:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Province"
                400:
                    $ref: "#/components/responses/BadRequest"
    /country/{provinceCode}:
        get:
            tags:
                - "country"
            parameters:
                - name: provinceCode
                  in: path
                  schema:
                      type: string
                  required: true
            operationId: getDetailProvince
            description: get 1 provinces
            responses:
                200:
                    description: get 1 provinces
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Province"
                400:
                    $ref: "#/components/responses/BadRequest"
    /country/{provinceCode}/districts:
        get:
            tags:
                - "country"
            parameters:
                - name: provinceCode
                  in: path
                  schema:
                      type: string
                  required: true
            operationId: getAllDistrictInProvince
            description: get all district in provinces
            responses:
                200:
                    description: get all district in provinces
                    content:
                        application/json:
                            schema:
                                properties:
                                    provinces:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/District"
                400:
                    $ref: "#/components/responses/BadRequest"
    /country/districts/{districtCode}:
        get:
            tags:
                - "country"
            parameters:
                - name: districtCode
                  in: path
                  schema:
                      type: string
                  required: true
            operationId: getDetailDistrict
            description: get 1 district
            responses:
                200:
                    description: get 1 district
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/District"
                400:
                    $ref: "#/components/responses/BadRequest"
    /country/districts/{districtCode}/wards:
        get:
            tags:
                - "country"
            parameters:
                - name: districtCode
                  in: path
                  schema:
                      type: string
                  required: true
            operationId: getAllWardsInDistrict
            description: get All Wards In District
            responses:
                200:
                    description: All Wards In District
                    content:
                        application/json:
                            schema:
                                properties:
                                    ward:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Ward"
                400:
                    $ref: "#/components/responses/BadRequest"
    /country/wards/{wardCode}:
        get:
            tags:
                - "country"
            parameters:
                - name: wardCode
                  in: path
                  schema:
                      type: string
                  required: true
            operationId: getDetailWard
            description: get 1 ward
            responses:
                200:
                    description: get 1 ward
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Ward"
                400:
                    $ref: "#/components/responses/BadRequest"
    /houses:
        get:
            operationId: getHouseHandle
            summary: get list of house
            tags:
                - "houses"
            parameters:
                - in: query
                  name: queryFor
                  required: true
                  schema:
                      type: string
                      description: map for query all maximum 500 houses and not having paging. Otherwise, normal is get house with size and paging
                      enum:
                          - map
                          - normal
                - in: query
                  name: queryType
                  required: true
                  schema:
                      type: string
                      enum:
                          - distance
                          - polygon
                          - all
                - in: query
                  name: distance
                  description: distance in KM
                  schema:
                      type: number
                      maximum: 100
                      minimum: 0
                - in: query
                  name: polygonPoints
                  description: "flat array contain polygon points in pair. format: lon,lat,lon,lat,... always lon,lat"
                  schema:
                      type: array
                      items:
                          type: number
                      minItems: 8
                  style: form
                  explode: false
                - in: query
                  name: mapPoint
                  description: "format: lon,lat"
                  schema:
                      type: array
                      items:
                          type: number
                      maxItems: 2
                      minItems: 2
                  style: form
                  explode: false
                - in: query
                  name: pageSize
                  schema:
                      type: integer
                      default: 20
                - in: query
                  name: pageNumber
                  schema:
                      type: integer
                      default: 0
                - in: query
                  name: houseType
                  schema:
                      type: integer
                      minimum: 1
                      maximum: 5
                - in: query
                  name: ownerId
                  schema:
                      type: string
                - in: query
                  name: houseCategory
                  schema:
                      type: integer
                      minimum: 1
                      maximum: 2
                - in: query
                  name: hasAc
                  schema:
                      type: boolean
                - in: query
                  name: hasParking
                  schema:
                      type: boolean
                - in: query
                  name: hasElevator
                  schema:
                      type: boolean
                - in: query
                  name: hasFurnished
                  schema:
                      type: boolean
                - in: query
                  name: allowPet
                  schema:
                      type: boolean
                - in: query
                  name: province
                  schema:
                      type: string
                - in: query
                  name: district
                  schema:
                      type: string
                - in: query
                  name: ward
                  schema:
                      type: string
                - in: query
                  name: squareLte
                  description: squares less than or equal
                  schema:
                      type: number
                      minimum: 0
                - in: query
                  name: squareGte
                  description: squares greater than or equal
                  schema:
                      type: number
                      minimum: 0
                - in: query
                  name: roomLte
                  description: rooms less than or equal
                  schema:
                      type: integer
                      minimum: 0
                - in: query
                  name: roomGte
                  description: rooms greater than or equal
                  schema:
                      type: integer
                      minimum: 0
                - in: query
                  name: bedRoomLte
                  description: bed rooms less than or equal
                  schema:
                      type: integer
                      minimum: 0
                - in: query
                  name: bedRoomGte
                  description: bed rooms greater than or equal
                  schema:
                      type: integer
                      minimum: 0
                - in: query
                  name: bathRoomLte
                  description: bath rooms less than or equal
                  schema:
                      type: integer
                      minimum: 0
                - in: query
                  name: bathRoomGte
                  description: bath rooms greater than or equal
                  schema:
                      type: integer
                      minimum: 0
                - in: query
                  name: fromDate
                  description: from date
                  schema:
                      type: string
                      format: date
                - in: query
                  name: toDate
                  description: to date
                  schema:
                      type: string
                      format: date
                - in: query
                  name: priceFrom
                  schema:
                      type: number
                      minimum: 0
                - in: query
                  name: priceTo
                  schema:
                      type: number
                      minimum: 0
                - in: query
                  name: sortBy
                  schema:
                      type: string
                      enum:
                          - created_date
                          - price
                          - distanceToPoint
                      default: created_date
                - in: query
                  name: sortOrder
                  schema:
                      type: string
                      enum:
                          - asc
                          - desc
                      default: desc
            responses:
                200:
                    description: returned houses
                    content:
                        application/json:
                            schema:
                                oneOf:
                                    - $ref: "#/components/schemas/HouseMapSearch"
                                    - $ref: "#/components/schemas/HouseNormalSearch"
                400:
                    $ref: "#/components/responses/BadRequest"
        post:
            operationId: postHouseHandle
            summary: create house
            description: endpoint for create house
            tags:
                - "houses"
            requestBody:
                required: true
                description: details of new house
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/HouseCreatingDetails"
            responses:
                201:
                    description: the house was successfully created.
                400:
                    $ref: "#/components/responses/BadRequest"
                402:
                    description: not enough money to create the house
    /houses/{houseId}:
        get:
            operationId: getHouseById
            summary: get house by id
            parameters:
                - name: houseId
                  in: path
                  schema:
                      type: integer
                  required: true
            tags:
                - "houses"
            responses:
                200:
                    description: ok
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/House"
        put:
            operationId: updateHouseById
            summary: update house by id
            parameters:
                - name: houseId
                  in: path
                  schema:
                      type: integer
                  required: true
            tags:
                - "houses"
            requestBody:
                required: true
                description: update data
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/HouseUpdatableFields"
            responses:
                200:
                    description: the house was successfully updated.
                400:
                    $ref: "#/components/responses/BadRequest"
        delete:
            operationId: deleteHouseById
            summary: delete house by id
            parameters:
                - name: houseId
                  in: path
                  schema:
                      type: integer
                  required: true
            tags:
                - "houses"
            responses:
                200:
                    description: the house was successfully updated.
                400:
                    $ref: "#/components/responses/BadRequest"
    /statistics/purchase:
        get:
            operationId: getPurchaseStatistics
            tags:
                - "statistics"
            parameters:
                - in: query
                  name: separateBy
                  description: enum month, date
                  schema:
                      type: string
                      enum:
                          - month
                          - date
                  required: true
                - in: query
                  name: dateFrom
                  description: date like that 2022-12-30
                  schema:
                      type: string
                      format: date
                  required: true
                - in: query
                  name: dateTo
                  description: date like that 2022-12-30
                  schema:
                      type: string
                      format: date
                  required: true
                - in: query
                  name: type
                  description: enum 1 2. 1 is manual, 2 is vnpay
                  schema:
                      type: integer
                      maximum: 2
                      minimum: 1
                  required: false
            responses:
                200:
                    description: list
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    oneOf:
                                        - $ref: "#/components/schemas/PurchaseStatisticsByDate"
                                        - $ref: "#/components/schemas/PurchaseStatisticsByMonth"
    /statistics/houses:
        get:
            operationId: getHouseStatistics
            tags:
                - "statistics"
            parameters:
                - in: query
                  name: separateBy
                  description: enum month, date
                  schema:
                      type: string
                      enum:
                          - month
                          - date
                  required: true
                - in: query
                  name: dateFrom
                  description: date like that 2022-12-30
                  schema:
                      type: string
                      format: date
                  required: true
                - in: query
                  name: dateTo
                  description: date like that 2022-12-30
                  schema:
                      type: string
                      format: date
                  required: true
                - in: query
                  name: type
                  description: enum house type. 1 -> 5
                  schema:
                      type: integer
                      maximum: 5
                      minimum: 1
                  required: false
                - in: query
                  name: category
                  description: enum house category. 1 -> 2
                  schema:
                      type: integer
                      maximum: 2
                      minimum: 1
                  required: false
            responses:
                200:
                    description: list
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    oneOf:
                                        - $ref: "#/components/schemas/TotalHouseCreatedStatisticsByDate"
                                        - $ref: "#/components/schemas/TotalHouseCreatedStatisticsByMonth"
    /statistics/top-purchase:
        get:
            operationId: getTopPurchase
            tags:
                - "statistics"
            parameters:
                - in: query
                  name: dateFrom
                  description: date like that 2022-12-30
                  schema:
                      type: string
                      format: date
                  required: true
                - in: query
                  name: dateTo
                  description: date like that 2022-12-30
                  schema:
                      type: string
                      format: date
                  required: true
            responses:
                200:
                    description: list
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Top10MostPurchased"

components:
    responses:
        BadRequest:
            description: Bad request.
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/BadRequestResponse"
    schemas:
        FileUpload:
            title: file object
            description: Fields of upload file.
            type: object
            properties:
                file:
                    type: string
                    format: binary
                    title: file
                    description: file that you want to upload
                file_type:
                    type: string
                    enum:
                        - video
                        - image
                    title: file's type
                    description: type of file
                    example: video
                GUID:
                    type: string
                    title: GUID
                    format: uuid
                    description: Send GUID that you have obtained from sse ("/progress") so server can push data through sse which has the same GUID
        BadRequestResponse:
            title: bad request.
            description: there is an error happening when server handle request.
            type: object
            properties:
                className:
                    type: string
                    title: name of the error
                    description: class name of the error
                    example: FileMaximumExceedException
                exMessage:
                    type: string
                    title: error message
                    description: error message
                    example: File not valid
        UserRole:
            title: user Role
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                role:
                    type: string
        UserFields:
            title: user fields
            description: Editable fields of a user type.
            type: object
            properties:
                gender:
                    type: string
                    title: user's gender
                    enum:
                        - male
                        - female
                        - other
                phoneNumber:
                    type: string
                    title: user's phone number
                    pattern: '^\d{1,12}$'
                intro:
                    type: string
                    title: user's intro
                    maxLength: 255
                image:
                    type: string
                    title: user's image url
                birthDate:
                    type: string
                    title: user's birth date
                    format: date
                    example: 2017-07-21
            required:
                - gender
                - phoneNumber
                - intro
                - image
                - birthDate
        PublicUserField:
            title: user fields that are public fields
            allOf:
                - $ref: "#/components/schemas/UserFields"
                - type: object
                  properties:
                      firstName:
                          title: user's first name
                          type: string
                          maxLength: 50
                      lastName:
                          title: user's last name
                          type: string
                          maxLength: 50
                      email:
                          title: user's email
                          pattern: '^[^\s@]+@[^\s@]+\.[^\s@]+$'
                          type: string
                          maxLength: 500
                      registerAt:
                          title: user's created Date
                          type: string
                          format: date-time
                          example: 2017-07-21T17:32:28Z
                      banned:
                          title: user's status
                          type: boolean
                          nullable: true
                      avgRating:
                          title: user's average rating
                          type: number
            required:
                - firstName
                - lastName
                - email
        UserCreationFields:
            title: user dto for sign in
            description: can omit banned, avgRating when post data to sign up
            allOf:
                - $ref: "#/components/schemas/PublicUserField"
                - type: object
                  properties:
                      password:
                          type: string
                          format: password
                          pattern: '\S{8,30}'
            required:
                - password
        UserPublicInformation:
            title: user public information
            description: omit balance
            allOf:
                - $ref: "#/components/schemas/PublicUserField"
                - type: object
                  properties:
                      title:
                          type: string
                      role:
                          type: string
                      userId:
                          type: string
                          format: uuid
        UserPublicInformationPage:
            title: user public information page
            description: user info page including total page and current page
            type: object
            properties:
                users:
                    type: array
                    items:
                        $ref: "#/components/schemas/UserPublicInformation"
                totalPage:
                    type: integer
                    example: 10
                currentPage:
                    type: integer
                    example: 0
        UserInformation:
            title: user information
            description: balance
            allOf:
                - $ref: "#/components/schemas/UserPublicInformation"
                - type: object
                  properties:
                      balance:
                          type: number
        UserInformationPage:
            title: user public information page
            description: user info page including total page and current page
            type: object
            properties:
                users:
                    type: array
                    items:
                        $ref: "#/components/schemas/UserInformation"
                totalPage:
                    type: integer
                    example: 10
                currentPage:
                    type: integer
                    example: 0
        MyPayments:
            title: user payment details
            description: user payment details exclude userId
            properties:
                paymentId:
                    type: string
                    format: uuid
                createdAt:
                    type: string
                    format: date-time
                total:
                    type: number
                paymentDescription:
                    type: string
                type:
                    type: string
                state:
                    type: string
                    enum:
                        - done
                        - pending
                        - cancelled
            required:
                - paymentId
                - createdAt
                - total
                - paymentDescription
                - type
                - state
        MyPaymentsPage:
            title: user payments pageable
            description: user payments pageable
            properties:
                payments:
                    type: array
                    items:
                        $ref: "#/components/schemas/MyPayments"
                totalPage:
                    type: integer
                    example: 10
                currentPage:
                    type: integer
                    example: 0
        Payment:
            title: user payment include email
            description: user payment include email
            allOf:
                - $ref: "#/components/schemas/MyPayments"
                - type: object
                  properties:
                      email:
                          type: string
                  required:
                      - email

        PaymentsPage:
            title: list payments
            description: show payments to the admin
            properties:
                payments:
                    type: array
                    items:
                        $ref: "#/components/schemas/Payment"
                totalPage:
                    type: integer
                    example: 10
                currentPage:
                    type: integer
                    example: 0
        VnpPaymentDetails:
            title: vnp payment detail
            properties:
                vnpTransNo:
                    type: string
                vnpOrderInfo:
                    type: string
                vnpAmount:
                    type: number
                vnpBankCode:
                    type: string
                vnpBankTransNo:
                    type: string
                vnpCardType:
                    type: string
                vnpDate:
                    type: string
                    format: date-time
            required:
                - vnpTransNo
                - vnpOrderInfo
                - vnpAmount
                - vnpBankTranNo
                - vnpCardType
                - vnpDate
        ManualPaymentDetail:
            title: manual payment details
            properties:
                creatorEmail:
                    type: string
                verifierEmail:
                    type: string
                amount:
                    type: number
                createdAt:
                    type: string
                    format: date-time
            required:
                - creatorEmail
                - verifierEmail
                - amount
                - createdAt
        AdministrativeUnitDetail:
            title: unit shared detail
            properties:
                code:
                    type: string
                name:
                    type: string
                nameEn:
                    type: string
                fullName:
                    type: string
                fullNameEn:
                    type: string
                codeName:
                    type: string
                unitTitle:
                    type: string
            required:
                - code
                - name
                - nameEn
                - fullName
                - fullNameEn
                - codeName
                - unitTitle
        Province:
            title: province details
            allOf:
                - $ref: "#/components/schemas/AdministrativeUnitDetail"
                - type: object
                  properties:
                      region:
                          type: string
                  required:
                      - region
        District:
            title: District details
            allOf:
                - $ref: "#/components/schemas/AdministrativeUnitDetail"
                - type: object
                  properties:
                      province:
                          type: string
                      provinceCode:
                          type: string
                  required:
                      - province
                      - provinceCode
        Ward:
            title: Ward details
            allOf:
                - $ref: "#/components/schemas/AdministrativeUnitDetail"
                - type: object
                  properties:
                      district:
                          type: string
                      districtCode:
                          type: string
                  required:
                      - district
                      - districtCode
        HouseUpdatableFields:
            title: house updatable fields
            properties:
                address:
                    type: string
                thumbnail:
                    type: string
                images:
                    type: array
                    items:
                        type: string
                price:
                    type: number
                    minimum: 0
                video:
                    type: string
                    nullable: true
                visible:
                    type: boolean
                square:
                    type: number
                    minimum: 0
                description:
                    type: string
                ac:
                    type: boolean
                    nullable: true
                parking:
                    type: boolean
                    nullable: true
                elevator:
                    type: boolean
                    nullable: true
                pet:
                    type: boolean
                    nullable: true
                rooms:
                    type: integer
                    minimum: 1
                    nullable: true
                bathRooms:
                    type: integer
                    minimum: 1
                    nullable: true
                bedRooms:
                    type: integer
                    minimum: 1
                    nullable: true
                maintenanceFee:
                    type: number
                    nullable: true
                furnished:
                    type: boolean
                    nullable: true
        HouseCreatingDetails:
            title: house details that need when creating
            properties:
                latitude:
                    type: number
                    format: double
                    minimum: -90
                    maximum: 90
                longitude:
                    type: number
                    format: double
                    minimum: -180
                    maximum: 180
                title:
                    type: string
                createdDate:
                    type: string
                    format: date-time
                address:
                    type: string
                ward:
                    type: string
                district:
                    type: string
                province:
                    type: string
                houseCategory:
                    type: integer
                    minimum: 1
                    maximum: 2
                houseType:
                    type: integer
                    minimum: 1
                    maximum: 5
                thumbnail:
                    type: string
                images:
                    type: array
                    items:
                        type: string
                price:
                    type: number
                video:
                    type: string
                    nullable: true
                visible:
                    type: boolean
                    default: true
                square:
                    type: number
                    minimum: 0
                description:
                    type: string
                ac:
                    type: boolean
                    nullable: true
                parking:
                    type: boolean
                    nullable: true
                elevator:
                    type: boolean
                    nullable: true
                pet:
                    type: boolean
                    nullable: true
                rooms:
                    type: integer
                    minimum: 1
                    nullable: true
                bathRooms:
                    type: integer
                    minimum: 1
                    nullable: true
                bedRooms:
                    type: integer
                    minimum: 1
                    nullable: true
                maintenanceFee:
                    type: number
                    nullable: true
                furnished:
                    type: boolean
                    nullable: true
            required:
                - latitude
                - longitude
                - address
                - price
                - thumbnail
                - title
                - visible
                - square
                - description
                - ward
                - houseCategory
                - houseType
        House:
            title: everything of a house
            allOf:
                - $ref: "#/components/schemas/HouseCreatingDetails"
                - type: object
                  properties:
                      owner:
                          type: object
                          properties:
                              email:
                                  type: string
                              userId:
                                  type: string
                              userImage:
                                  type: string
                              userRating:
                                  type: number
                              lastName:
                                  type: string
                              firstName:
                                  type: string
                              phoneNumber:
                                  type: string
        HouseSearchDetails:
            title: house data to show when user query search
            properties:
                houseId:
                    type: string
                price:
                    type: number
                thumbnail:
                    type: string
                title:
                    type: string
                address:
                    type: string
                houseType:
                    type: integer
                tradeCategory:
                    type: integer
                latitude:
                    type: double
                longitude:
                    type: double
        HouseMapSearch:
            title: house list when user query map search
            properties:
                houses:
                    type: array
                    items:
                        $ref: "#/components/schemas/HouseSearchDetails"
                size:
                    description: size of house arrays
                    type: integer
                totalSize:
                    description: total size search able
                    type: integer
        HouseNormalSearch:
            title: house list when user query normal search
            properties:
                houses:
                    type: array
                    items:
                        $ref: "#/components/schemas/HouseSearchDetails"
                currentPage:
                    type: integer
                totalPage:
                    type: integer
        PurchaseStatisticsByDate:
            title: purchase statistic separated by date
            properties:
                date:
                    type: string
                    format: date
                total:
                    type: number
                count:
                    type: integer
                    format: int64
        PurchaseStatisticsByMonth:
            title: purchase statistic separated by month
            properties:
                year:
                    type: integer
                month:
                    type: integer
                total:
                    type: number
                count:
                    type: integer
                    format: int64
        TotalHouseCreatedStatisticsByDate:
            title: separated by date
            properties:
                date:
                    type: string
                    format: date
                count:
                    type: integer
                    format: int64
        TotalHouseCreatedStatisticsByMonth:
            title: separated by month
            properties:
                year:
                    type: integer
                month:
                    type: integer
                count:
                    type: integer
                    format: int64
        Top10MostPurchased:
            title: top 10 people purchased the most
            properties:
                count:
                    type: integer
                total:
                    type: number
                userId:
                    type: string
                email:
                    type: string
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT # optional, for documentation purposes only

security:
    - bearerAuth: []
